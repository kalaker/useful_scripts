#!/usr/bin/env bash
##########################################################################
# Downloads & compiles the source for zsh since stu doesn't have it      #
# installed or include it in /etc/shells. This will install it to        #
# $HOME/.local/bin. manpages will go in $HOME/.local/share/man. Using    #
# $HOME/.local as the prefix complies with freedesktop hierarchy. Since  #
# chsh can't be used for shells not in /etc/shells, .bashrc is modified  #
# to exec zsh as a login shell.                                          #
#                                                                        #
# Author: Kyle Laker <kyle@laker.email>                                  #
# Copyright (c) 2017 Kyle Laker                                          #
# Licensed under the MIT License                                         #
##########################################################################

#-----------------
# Global variables
#-----------------
zsh_version="5.3.1"
zsh_download_url="http://sourceforge.net/projects/zsh/files/zsh/${zsh_version}/zsh-${zsh_version}.tar.xz"
zsh_git_url="git://git.code.sf.net/p/zsh/code"
oh_my_zsh_url="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh"
oh_my_script_name="oh-my-zsh-install.sh"
install_directory="${HOME}/zsh_install"
config_prefix_path="${HOME}/.local"

#----------
# Functions
#----------

#---
# Downloads the zsh source from the URL defined globally and then
# un-tars it. Ideally, this would rely on the zsh git repo, but I was
# getting connection refused when trying to git clone while writing this
# script.
#---
download_source() {
    if [[ "$use_git_source" == false ]]; then
        echo "==> Downloading zsh sources"
        wget ${zsh_download_url} && \
        echo "==> Untarring sources" && \
        tar xf "zsh-${zsh_version}.tar.xz"
    else
        git clone "${zsh_git_url}" zsh
    fi
}

#---
# Runs the configuration scripts in the zsh souces to prepare for
# running make. This requires running the preconfig and configure
# scripts.
#---
configure() {
    echo "==> Running zsh preconfigure"
    ./Util/preconfig && \
    echo "==> Configuring zsh with prefix set to ${config_prefix_path}" && \
    ./configure --prefix="${config_prefix_path}"
}

#---
# Makes and tests zsh. Uses -j4 for the make because stu can probably
# handle that without much of an issue. Also runs make check.
#---
make_zsh() {
    echo "==> Making zsh"
    make -j4 && \
    echo "==> Running make check" && \
    make check
}

#---
# Runs make install, which will place everything in the directory
# specified in $config_prefix_path.
#---
install_zsh() {
    echo "==> Installing zsh"
    make install
}

#---
# Essentially replaces .bashrc with a single line that execs zsh with
# the login command line flag. Backs up the bashrc first and then writes
# the new config.
#---
modify_bashrc() {
    if [ ! -f "${HOME}/.bashrc" ]; then
        echo "==> No .bashrc to back up"
    else
        echo "==> Backing up ~/.bashrc to ~/.bashrc.bak"
        mv "${HOME}/.bashrc" "${HOME}/.bashrc.bak"
    fi
    echo "==> Using roundabout way of using zsh as login shell"
cat <<'EOF' > "${HOME}/.bashrc"
if [ -z "$PS1" ]; then
    return
fi
exec ${HOME}/.local/bin/zsh -l
EOF
}


#---
# Downloads the oh-my-zsh install script and places it in the location
# specified by oh_my_script_name.
#---
download_oh_my_zsh() {
    echo "==> Downloading Oh My Zsh install script"
    curl -l "${oh_my_zsh_url}" -o "${oh_my_script_name}"
}

#---
# Comments out five lines the oh-my-zsh install script because the
# script will check for zsh in /etc/shells. Clearly in an environment
# where zsh is being put in your home directory, there isn't much access
# to modify /etc/shells.
#---
modify_oh_my_zsh() {
    sed -i"" -e '/CHECK_ZSH_INSTALLED=/,+4 s/^/#/' ${oh_my_script_name}
}

#---
# Executes the modified oh-my-zsh install script. The install script
# attempts to run chsh which will fail. This function alerts the user
# that particular error is okay. The bashrc modifications get us around
# this.
#---
install_oh_my_zsh() {
    echo "==> Executing Oh My Zsh install script. At the end if you get an"
    echo "    error about chsh failing, that's okay"
    ./${oh_my_script_name}
}

#---
# Creates the install directory, by default $HOME/zsh_install. This is
# set by install_directory global variable.
#---
create_install_directory() {
    echo "==> Creating install directory"
    mkdir -p "${install_directory}"
}

#---
# Displays a message alerting the user that the install completed
# successfully.
#---
install_complete_message() {
cat <<EOF
==> Installation complete

    Make sure to set MANPATH=\$HOME/.local/share/man if you want the zsh
    documentation.

    github.com/kylelaker/dotfiles/ may be of use if you want a starter
    config for zsh as well as other things.

    If you sign out then sign back in or simply start a new terminal
    session, you should have zsh as your shell.
EOF
}

#---
# Directs error output to stderr.
#---
err() {
    echo "!!! $*" >&2
}

parse_args() {
    use_git_source=false
    user_wants_oh_my_zsh=false;
    while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help) show_help; exit;;

        -G|--git) use_git_source=true; zsh_version=""; shift 1;;
        --install-oh-my-zsh) user_wants_oh_my_zsh=true; shift 1;;

        *) show_help; exit 1;;
    esac
    done
}

show_help() {
    echo "stu_install_zsh [OPTION]..."
    echo " DESCRIPTION"
    echo "  Installs ZSH into the user's home directory and modifies the"
    echo "  ~/.bashrc file to execute zsh as a login shell. Optionally,"
    echo "  this can also download and configure oh-my-zsh"
    echo ""
    echo " OPTIONS"
    echo "  -h, --help"
    echo "          display this help text"
    echo "  -G, --git"
    echo "          download the sources from the git repo rather than using"
    echo "          a release version. This may be unstable."
    echo "  --install-oh-my-zsh"
    echo "          also download, install, and configure oh-my-zsh"
}

#---
# Handles the main logic of the script. Essentially runs all the
# functions in the script with a check to see if they worked or not. If
# they failed, the function returns. In most cases, execution should not
# continue if the exit status of the previous step was non-zero. There
# are some cases were it is inconsequential: .bashrc editing & oh-my-zsh
# installation. Also handles directory changes and permissions changes
# between some steps.
#---
main() {
    parse_args "$@"
    echo "==> Installing ZSH ${zsh_version}"

    if ! create_install_directory; then
        err "There was a problem creating the install directory"
        return
    fi

    if ! cd "${install_directory}"; then
        err "Unable to enter install directory"
        return
    fi

    if ! download_source; then
        err "Error downloading source"
        return
    fi

    if [[ "$use_git_source" == false ]]; then
        if ! cd "zsh-${zsh_version}"; then
            err "Unable to enter zsh source directory"
            return
        fi
    else
        if ! cd "zsh"; then
            err "Unable to enter zsh source directory"
            return
        fi
    fi

    if ! configure; then
        err "Error while configuring"
        return
    fi

    if ! make_zsh; then
        err "Error while making zsh"
        return
    fi

    if ! install_zsh; then
        err "Install failed"
        return
    fi

    if ! modify_bashrc; then
        err "Unable to modify bashrc"
        echo "    zsh will not be your default shell." >&2
        echo "    Continuing anyway..." >&2
    fi

    if ! cd "${install_directory}"; then
        err "Unable to enter install directory"
        return
    fi

    if [[ "$user_wants_oh_my_zsh" == true ]]; then
        if ! download_oh_my_zsh; then
            err "Error downloading Oh My Zsh"
            return
        fi

        if ! modify_oh_my_zsh; then
            err "Could not make necessary modifications to Oh My Zsh install script"
            return
        fi

        if ! chmod +x "./${oh_my_script_name}"; then
            err "Error making Oh My Zsh install script executable"
            return
        fi

        if ! install_oh_my_zsh; then
            echo "==> There may have been some errors during the oh-my-zsh install"
            echo "    if these were about chsh, you are fine. If there are anything"
            echo "    else, Oh My Zsh may not have installed correctly."
        fi
    fi

    install_complete_message
}

#---
# Actually call the main method to begin execution.
#---
main "$@"
